//---------------------------
// LINEAR INTERPOLATION
// Given the representation of two points as a sass map
// calculate the definition of a line between the two points
// and return a linear equation as a CSS calc() function
//----------------------------
@function linearInterpolation($map, $unit) {
  $keys         : map-keys($map);

  @if length($keys) != 2 {
    @error "The length passed to linearInterpolation() must have exactly 2 values";
  }

  //convert rem to px is $unit == "rem" and strip unit from lengths
  $minFontSize  : map-get($map, nth($keys, 1));
  $maxFontSize  : map-get($map, nth($keys, 2));

  @if $unit == rem {
    $minFontSize: stripUnit(remToPx($minFontSize, $htmlElementFontSize));
    $maxFontSize: stripUnit(remToPx($maxFontSize, $htmlElementFontSize));
  } @else 
  if $unit == px {
    $minFontSize: stripUnit(map-get($map, nth($keys, 1)));
    $maxFontSize: stripUnit(map-get($map, nth($keys, 2)));
  }

  //get width from breakpoints map if a string is passed instead of a number
  $minScreenSize: stripUnit(nth($keys, 1));
  $maxScreenSize: stripUnit(nth($keys, 2));
  @if type-of($minScreenSize) == string {
    $minScreenSize: stripUnit(map-get($breakpoints, $minScreenSize));
  }
  @if type-of($maxScreenSize) == string {
    $maxScreenSize: stripUnit(map-get($breakpoints, $maxScreenSize));
  }
  @if type-of($minScreenSize) != number or type-of($maxScreenSize) != number {
    @error "The $breakpoints map does not contain one or both the keys passed.";
  }

  //build calc() function:
  $m            : ($maxFontSize - $minFontSize)/($maxScreenSize - $minScreenSize);
  $b            : $minFontSize - $m * $minScreenSize;

  //convert px to rem if $unit is rem
  @if $unit == rem {
    $b: stripUnit(pxToRem($b, $htmlElementFontSize));
  }

  $sign         : "+";
  @if $b < 0 {
    $b   : abs($b);
    $sign: "-";
  }
  //return calc() function
  @return calc(#{$m*100}vw #{$sign} #{$b}#{$unit});
}
