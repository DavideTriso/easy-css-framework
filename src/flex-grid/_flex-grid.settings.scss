//CONTAINER
/*
Explanation:
$containerClassName -> is the name of the container classes.
$containerMaxWidthsMap -> is a sass map (key, value pairs) used to generate containers with different widths.
The key is used as the modifier name to generate the container modifier class.
The default output will result in: .container_mid {[...]} .container_small {[...]} .container_large{[...]}
*/

$containerClassName: ".container" !default;
$containerMaxWidthsMap: (
  mid  : 1200px,
  small: 1000px,
  large: 1400px
)
!default;

//BOXED CONTAINER
/*
Explanation:
$boxedContainerModifierName -> is the modifier name used to generate boxed container modifier classes.
$boxedContainerBreakpointsMap -> is a sass map (key, value pairs) used to generate boxed containers.
$boxedContainerSubtractList -> list of lenghts in pixel used to calculate the width of the boxed container for each breakpoint in the breakpoints map. Fot this reaseon, the length of the $boxedContainerSubtractList should be equal to the length of the $boxedContainerBreakpointsMap. The width of a boxed container is calculated by subtracting the length passed in the $boxedContainerSubtractList from the corresponding breakpoints lenght.
By default the first three breakpoints are removed from the $boxedContainerBreakpointsMap, because we do not want boxed containers on small screens, but the container should span the full length of the screen.
The modifier class for the boxed container generated by the framework is .container_boxed.
*/
$boxedContainerModifierName: "boxed" !default;
$boxedContainerBreakpointsMap: map-remove($breakpoints, w0, w1, w2) !default;
$boxedContainerSubtractList: 16px 50px 120px 180px !default;

//ROWS
/*
Expanation:
$rowClassName -> is the name of the row class
All other variables: css properties of the row
*/
$rowClassName: ".row" !default;
$rowAlignItems: flex-start !default;
$rowAlignContent: flex-start !default;
$rowFlexDirection: row !default;
$rowFlexWrap: wrap !default;
$rowJustifyContent: flex-start !default;

//ROW MODIFIERS
$rowJustifyCenterModifierName: "hcenter" !default;
$rowJustifyCenterAlignItems: "" !default;
$rowJustifyCenterAlignContent: "" !default;
$rowJustifyCenterFlexDirection: "" !default;
$rowJustifyCenterFlexWrap: "" !default;
$rowJustifyCenterJustifyContent: center !default;

//
$rowAlignCenterModifierName: "vcenter" !default;
$rowAlignCenterAlignItems: "" !default;
$rowAlignCenterAlignContent: center !default;
$rowAlignCenterFlexDirection: "" !default;
$rowAlignCenterFlexWrap: "" !default;
$rowAlignCenterJustifyContent: "" !default;

//COLUMNS
/*
Explanation:
$columnClassName -> is the name of the column class
$columnsNumber -> is the number of columns.
$columnsBreakpointsMap -> is a sass map (key, value pairs) wich contains the breakpoints used to generate the responsive columns classes. The key is used as the modifier name for the .col class.
The default output will result, for example, in .col_1, .col_2, .col_3, [...], .col_24 , .col_w1-1, .col_w1-2, .col_w1-3, [...], .col_w1-24, [...], .col_w5-1, .col_w5-2, .col_w5-3, [...], .col_w5-24.
*/
$columnClassName: ".col" !default;
$columnsNumber: 24 !default;
$columnsBreakpointsMap: $breakpoints !default;

//OFFSET
/*
Explanation:
$offsetModifierName -> is the modifier name used to generate the offset modifier classes.
$offsetColumnsNumber -> is the number of modifier classes to generate for each modifier breakpoint.
*/
$offsetModifierName: "offset" !default;
$offsetColumnsNumber: 24 !default;

//NEGATIVE OFFSET
/*
Explanation:
$negativeOffsetModifierName -> is the modifier name used to generate the negative offset modifier classes.
$negativeOffsetColumnsNumber -> is the number of modifier classes to generate for each modifier breakpoint.
*/
$negativeOffsetModifierName: "negative-offset" !default;
$negativeOffsetColumnsNumber: 24 !default;

//GUTTERS
/*
Explanation:
$gutterModifierName -> is the modifier name used to generate the gutter modifier classes
$guttersBreakpointsMap -> is the sass map of the breakpoint on wich the responsive gutter should change (by default the framework changes the gutter size only on three breakpoints: w0, w3, w5).
$guttersList -> list of lengths in rem of the gutters to be applied to each breakpoint.
ALl other variables: same as $gutterModifierName and $gutterModifierName.
The default outpu will result in .container_gutter {[...]}, .row_gutter {[...]}, .col_gutter {[...]}, .container_gutter-small {[...]}, .row_gutter-small {[...]}, .col_gutter-small {[...]}, .container_gutter-large {[...]}, .row_gutter-large {[...]}, .col_gutter-large {[...]}
*/
$gutterModifierName: "gutter" !default;
$guttersBreakpointsMap: map-remove($breakpoints, w1, w2, w4, w6) !default;
$guttersList: 0.5rem 0.75rem 1rem !default;
$smallGutterModifierName: "gutter-small" !default;
$smallGuttersList: 0.25rem 0.5rem 75rem !default;
$largeGutterModifierName: "gutter-large" !default;
$largeGuttersList: 1rem 1.5rem 2rem !default;

//reset gutter
/*
Explanation:
$resetGutterModifierName -> is the modifier name used to generate the responsive classes to reset gutter for specific breakpoints.
The mixin generates responsive classes bound between a max and min width, wich will reset the gutter for the specific breakpoint.
The $guttersBreakpointsMap is used to generate the breakpoints.
Gutter reset classes looks like .container_w0-gutter-reset, .row_w0-gutter-reset, .col_w0-gutter-reset, .container_w3-gutter, .row_w3-gutter-reset, .col_w3-gutter-reset, [...]
Because the classes are bound between a min and max width, .container_w0-gutter-reset will apply only until w3 width, so will .container_w3-gutter-reset apply only until w5 width.
*/
$resetGutterModifierName: "gutter-reset" !default;