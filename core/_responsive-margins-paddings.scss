//Generate padding and margin classes with automatic or user difined adaptive resize.
//Automatic resize: Padding and margin adapts to wievport width. Margins and paddings increase with larger viewports
//User defined resize: Padding and margin adapts to wievport width if user adds classes .desktop-m and .desktop-p (for desktop Margins and Paddings) and/or classes tablet-m and .tablet-p (for tablet Margins and Paddings)
//
//mixins for margin classes
//all four sides
@mixin margins {
  @for  $i from 1 through $firstMargin {
    .m#{$i} {
      margin: $firstMargin + $intervalMargin * $i;
    }
  }
}
//left and right;
@mixin margins-left-right {
  @for $i from 1 through $firstMargin {
    .mlr#{$i} {
      margin-left: $firstMargin + $intervalMargin * $i;
      margin-right: $firstMargin + $intervalMargin * $i;
    }
  }
}
//top and bottom;
@mixin margins-top-bottom {
  @for $i from 1 through $firstMargin {
    .mtb#{$i} {
      margin-bottom: $firstMargin + $intervalMargin * $i;
      margin-top: $firstMargin + $intervalMargin * $i;
    }
  }
}
//top;
@mixin margins-top {
  @for $i from 1 through $firstMargin {
    .mt#{$i} {
      margin-top: $firstMargin + $intervalMargin * $i;
    }
  }
}
//bottom;
@mixin margins-bottom {
  @for $i from 1 through $firstMargin {
    .mb#{$i} {
      margin-bottom: $firstMargin + $intervalMargin * $i;
    }
  }
}
//left;
@mixin margins-left {
  @for $i from 1 through $firstMargin {
    .ml#{$i} {
      margin-left: $firstMargin + $intervalMargin * $i;
    }
  }
}
//bottom;
@mixin margins-right {
  @for $i from 1 through $firstMargin {
    .mr#{$i} {
      margin-right: $firstMargin + $intervalMargin * $i;
    }
  }
}
//
//
//responsive
//tablet
@mixin margins-tablet {
  @for $i from 1 through $firstMargin {
    @if $activateAutoResponsiveMargins=="true" {
      .m#{$i} {
        margin: $firstMargin + $intervalMargin * $i * $marginsTabletMultiplyFactor;
      }
    }
    @else {
      .m#{$i}.tablet-m {
        margin: $firstMargin + $intervalMargin * $i * $marginsTabletMultiplyFactor;
      }
    }
  }
}
//left and right;
@mixin margins-left-right-tablet {
  @for $i from 1 through $firstMargin {
    @if $activateAutoResponsiveMargins=="true" {
      .mlr#{$i} {
        margin-left: $firstMargin + $intervalMargin * $i * $marginsTabletMultiplyFactor;
        margin-right: $firstMargin + $intervalMargin * $i * $marginsTabletMultiplyFactor;
      }
    }
    @else {
      .mlr#{$i}.tablet-m {
        margin-left: $firstMargin + $intervalMargin * $i * $marginsTabletMultiplyFactor;
        margin-right: $firstMargin + $intervalMargin * $i * $marginsTabletMultiplyFactor;
      }
    }
  }
}
//top and bottom;
@mixin margins-top-bottom-tablet {
  @for $i from 1 through $firstMargin {
    @if $activateAutoResponsiveMargins=="true" {
      .mtb#{$i} {
        margin-bottom: $firstMargin + $intervalMargin * $i * $marginsTabletMultiplyFactor;
        margin-top: $firstMargin + $intervalMargin * $i * $marginsTabletMultiplyFactor;
      }
    }
    @else {
      .mtb#{$i}.tablet-m {
        margin-bottom: $firstMargin + $intervalMargin * $i * $marginsTabletMultiplyFactor;
        margin-top: $firstMargin + $intervalMargin * $i * $marginsTabletMultiplyFactor;
      }
    }
  }
}
//top;
@mixin margins-top-tablet {
  @for $i from 1 through $firstMargin {
    @if $activateAutoResponsiveMargins=="true" {
      .mt#{$i} {
        margin-top: $firstMargin + $intervalMargin * $i * $marginsTabletMultiplyFactor;
      }
    }
    @else {
      .mt#{$i}.tablet-m {
        margin-top: $firstMargin + $intervalMargin * $i * $marginsTabletMultiplyFactor;
      }
    }
  }
}
//bottom;
@mixin margins-bottom-tablet {
  @for $i from 1 through $firstMargin {
    @if $activateAutoResponsiveMargins=="true" {
      .mb#{$i} {
        margin-bottom: $firstMargin + $intervalMargin * $i * $marginsTabletMultiplyFactor;
      }
    }
    @else {
      .mb#{$i}.tablet-m {
        margin-bottom: $firstMargin + $intervalMargin * $i * $marginsTabletMultiplyFactor;
      }
    }
  }
}
//left;
@mixin margins-left-tablet {
  @for $i from 1 through $firstMargin {
    @if $activateAutoResponsiveMargins=="true" {
      .ml#{$i} {
        margin-left: $firstMargin + $intervalMargin * $i * $marginsTabletMultiplyFactor;
      }
    }
    @else {
      .ml#{$i}.tablet-m {
        margin-left: $firstMargin + $intervalMargin * $i * $marginsTabletMultiplyFactor;
      }
    }
  }
}
//bottom;
@mixin margins-right-tablet {
  @for $i from 1 through $firstMargin {
    @if $activateAutoResponsiveMargins=="true" {
      .mr#{$i} {
        margin-right: $firstMargin + $intervalMargin * $i * $marginsTabletMultiplyFactor;
      }
    }
    @else {
      .mr#{$i}.tablet-m {
        margin-right: $firstMargin + $intervalMargin * $i * $marginsTabletMultiplyFactor;
      }
    }
  }
}
//smart
@mixin margins-desktop {
  @for $i from 1 through $firstMargin {
    @if $activateAutoResponsiveMargins=="true" {
      .m#{$i} {
        margin: $firstMargin + $intervalMargin * $i * $marginsDesktopMultiplyFactor;
      }
    }
    @else {
      .m#{$i}.desktop-m {
        margin: $firstMargin + $intervalMargin * $i * $marginsDesktopMultiplyFactor;
      }
    }
  }
}
//left and right;
@mixin margins-left-right-desktop {
  @for $i from 1 through $firstMargin {
    @if $activateAutoResponsiveMargins=="true" {
      .mlr#{$i} {
        margin-left: $firstMargin + $intervalMargin * $i * $marginsDesktopMultiplyFactor;
        margin-right: $firstMargin + $intervalMargin * $i * $marginsDesktopMultiplyFactor;
      }
    }
    @else {
      .mlr#{$i}.desktop-m {
        margin-left: $firstMargin + $intervalMargin * $i * $marginsDesktopMultiplyFactor;
        margin-right: $firstMargin + $intervalMargin * $i * $marginsDesktopMultiplyFactor;
      }
    }
  }
}
//top and bottom;
@mixin margins-top-bottom-desktop {
  @for $i from 1 through $firstMargin {
    @if $activateAutoResponsiveMargins=="true" {
      .mtb#{$i} {
        margin-bottom: $firstMargin + $intervalMargin * $i * $marginsDesktopMultiplyFactor;
        margin-top: $firstMargin + $intervalMargin * $i * $marginsDesktopMultiplyFactor;
      }
    }
    @else {
      .mtb#{$i}.desktop-m {
        margin-bottom: $firstMargin + $intervalMargin * $i * $marginsDesktopMultiplyFactor;
        margin-top: $firstMargin + $intervalMargin * $i * $marginsDesktopMultiplyFactor;
      }
    }
  }
}
//top;
@mixin margins-top-desktop {
  @for $i from 1 through $firstMargin {
    @if $activateAutoResponsiveMargins=="true" {
      .mt#{$i} {
        margin-top: $firstMargin + $intervalMargin * $i * $marginsDesktopMultiplyFactor;
      }
    }
    @else {
      .mt#{$i}.desktop-m {
        margin-top: $firstMargin + $intervalMargin * $i * $marginsDesktopMultiplyFactor;
      }
    }
  }
}
//bottom;
@mixin margins-bottom-desktop {
  @for $i from 1 through $firstMargin {
    @if $activateAutoResponsiveMargins=="true" {
      .mb#{$i} {
        margin-bottom: $firstMargin + $intervalMargin * $i * $marginsDesktopMultiplyFactor;
      }
    }
    @else {
      .mb#{$i}.desktop-m {
        margin-bottom: $firstMargin + $intervalMargin * $i * $marginsDesktopMultiplyFactor;
      }
    }
  }
}
//left;
@mixin margins-left-desktop {
  @for $i from 1 through $firstMargin {
    @if $activateAutoResponsiveMargins=="true" {
      .ml#{$i} {
        margin-left: $firstMargin + $intervalMargin * $i * $marginsDesktopMultiplyFactor;
      }
    }
    @else {
      .ml#{$i}.desktop-m {
        margin-left: $firstMargin + $intervalMargin * $i * $marginsDesktopMultiplyFactor;
      }
    }
  }
}
//bottom;
@mixin margins-right-desktop {
  @for $i from 1 through $firstMargin {
    @if $activateAutoResponsiveMargins=="true" {
      .mr#{$i} {
        margin-right: $firstMargin + $intervalMargin * $i * $marginsDesktopMultiplyFactor;
      }
    }
    @else {
      .mr#{$i}.desktop-m {
        margin-right: $firstMargin + $intervalMargin * $i * $marginsDesktopMultiplyFactor;
      }
    }
  }
}
//mixins for padding classes
//all four sides
@mixin paddings {
  @for $i from 1 through $firstPadding {
    .p#{$i} {
      padding: $firstPadding + $intervalPadding * $i;
    }
  }
}
//left and right;
@mixin paddings-left-right {
  @for $i from 1 through $firstPadding {
    .plr#{$i} {
      padding-left: $firstPadding + $intervalPadding * $i;
      padding-right: $firstPadding + $intervalPadding * $i;
    }
  }
}
//top and bottom;
@mixin paddings-top-bottom {
  @for $i from 1 through $firstPadding {
    .ptb#{$i} {
      padding-bottom: $firstPadding + $intervalPadding * $i;
      padding-top: $firstPadding + $intervalPadding * $i;
    }
  }
}
//top;
@mixin paddings-top {
  @for $i from 1 through $firstPadding {
    .pt#{$i} {
      padding-top: $firstPadding + $intervalPadding * $i;
    }
  }
}
//bottom;
@mixin paddings-bottom {
  @for $i from 1 through $firstPadding {
    .pb#{$i} {
      padding-bottom: $firstPadding + $intervalPadding * $i;
    }
  }
}
//left;
@mixin paddings-left {
  @for $i from 1 through $firstPadding {
    .pl#{$i} {
      padding-left: $firstPadding + $intervalPadding * $i;
    }
  }
}
//bottom;
@mixin paddings-right {
  @for $i from 1 through $firstPadding {
    .pr#{$i} {
      padding-right: $firstPadding + $intervalPadding * $i;
    }
  }
}
//
//
//responsive
//tablet
@mixin paddings-tablet {
  @for $i from 1 through $firstPadding {
    .p#{$i}.tablet-p {
      padding: $firstPadding + $intervalPadding * $i * $paddingsTabletMultiplyFactor;
    }
  }
}
//left and right;
@mixin paddings-left-right-tablet {
  @for $i from 1 through $firstPadding {
    .plr#{$i}.tablet-p {
      padding-left: $firstPadding + $intervalPadding * $i * $paddingsTabletMultiplyFactor;
      padding-right: $firstPadding + $intervalPadding * $i * $paddingsTabletMultiplyFactor;
    }
  }
}
//top and bottom;
@mixin paddings-top-bottom-tablet {
  @for $i from 1 through $firstPadding {
    .ptb#{$i}.tablet-p {
      padding-bottom: $firstPadding + $intervalPadding * $i * $paddingsTabletMultiplyFactor;
      padding-top: $firstPadding + $intervalPadding * $i * $paddingsTabletMultiplyFactor;
    }
  }
}
//top;
@mixin paddings-top-tablet {
  @for $i from 1 through $firstPadding {
    .pt#{$i}.tablet-p {
      padding-top: $firstPadding + $intervalPadding * $i * $paddingsTabletMultiplyFactor;
    }
  }
}
//bottom;
@mixin paddings-bottom-tablet {
  @for $i from 1 through $firstPadding {
    .pb#{$i}.tablet-p {
      padding-bottom: $firstPadding + $intervalPadding * $i * $paddingsTabletMultiplyFactor;
    }
  }
}
//left;
@mixin paddings-left-tablet {
  @for $i from 1 through $firstPadding {
    .pl#{$i}.tablet-p {
      padding-left: $firstPadding + $intervalPadding * $i * $paddingsTabletMultiplyFactor;
    }
  }
}
//bottom;
@mixin paddings-right-tablet {
  @for $i from 1 through $firstPadding {
    .pr#{$i}.tablet-p {
      padding-right: $firstPadding + $intervalPadding * $i * $paddingsTabletMultiplyFactor;
    }
  }
}
//smart
@mixin paddings-desktop {
  @for $i from 1 through $firstPadding {
    .p#{$i}.desktop-p {
      padding: $firstPadding + $intervalPadding * $i * $paddingsDesktopMultiplyFactor;
    }
  }
}
//left and right;
@mixin paddings-left-right-desktop {
  @for $i from 1 through $firstPadding {
    .plr#{$i}.desktop-p {
      padding-left: $firstPadding + $intervalPadding * $i * $paddingsDesktopMultiplyFactor;
      padding-right: $firstPadding + $intervalPadding * $i * $paddingsDesktopMultiplyFactor;
    }
  }
}
//top and bottom;
@mixin paddings-top-bottom-desktop {
  @for $i from 1 through $firstPadding {
    .ptb#{$i}.desktop-p {
      padding-bottom: $firstPadding + $intervalPadding * $i * $paddingsDesktopMultiplyFactor;
      padding-top: $firstPadding + $intervalPadding * $i * $paddingsDesktopMultiplyFactor;
    }
  }
}
//top;
@mixin paddings-top-desktop {
  @for $i from 1 through $firstPadding {
    .pt#{$i}.desktop-p {
      padding-top: $firstPadding + $intervalPadding * $i * $paddingsDesktopMultiplyFactor;
    }
  }
}
//bottom;
@mixin paddings-bottom-desktop {
  @for $i from 1 through $firstPadding {
    .pb#{$i}.desktop-p {
      padding-bottom: $firstPadding + $intervalPadding * $i * $paddingsDesktopMultiplyFactor;
    }
  }
}
//left;
@mixin paddings-left-desktop {
  @for $i from 1 through $firstPadding {
    .pl#{$i}.desktop-p {
      padding-left: $firstPadding + $intervalPadding * $i * $paddingsDesktopMultiplyFactor;
    }
  }
}
//bottom;
@mixin paddings-right-desktop {
  @for $i from 1 through $firstPadding {
    .pr#{$i}.desktop-p {
      padding-right: $firstPadding + $intervalPadding * $i * $paddingsDesktopMultiplyFactor;
    }
  }
}
@include margins;
@include margins-left-right;
@include margins-top-bottom;
@include margins-top;
@include margins-bottom;
@include margins-left;
@include margins-right;
@include paddings;
@include paddings-left-right;
@include paddings-top-bottom;
@include paddings-top;
@include paddings-bottom;
@include paddings-left;
@include paddings-right;
@media screen and (min-width: $w3) {
  @if $activateResponsiveMargins=="true" {
    @include margins-tablet;
    @include margins-left-right-tablet;
    @include margins-top-bottom-tablet;
    @include margins-top-tablet;
    @include margins-bottom-tablet;
    @include margins-left-tablet;
    @include margins-right-tablet;
  }
  @if $activateResponsivePaddings=="true" {
    @include paddings-tablet;
    @include paddings-left-right-tablet;
    @include paddings-top-bottom-tablet;
    @include paddings-top-tablet;
    @include paddings-bottom-tablet;
    @include paddings-left-tablet;
    @include paddings-right-tablet;
  }
}
@media screen and (min-width: $w5 - 1px) {
  @if $activateResponsiveMargins=="true" {
    @include margins-desktop;
    @include margins-left-right-desktop;
    @include margins-top-bottom-desktop;
    @include margins-top-desktop;
    @include margins-bottom-desktop;
    @include margins-left-desktop;
    @include margins-right-desktop;
  }
  @if $activateResponsivePaddings=="true" {
    @include paddings-desktop;
    @include paddings-left-right-desktop;
    @include paddings-top-bottom-desktop;
    @include paddings-top-desktop;
    @include paddings-bottom-desktop;
    @include paddings-left-desktop;
    @include paddings-right-desktop;
  }
}